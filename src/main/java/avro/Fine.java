/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Fine extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 182824895315034353L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Fine\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"fineReason\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"fineAmount\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"fineDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ssn\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Fine> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Fine> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Fine> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Fine> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Fine> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Fine to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Fine from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Fine instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Fine fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence fineReason;
  private java.lang.CharSequence fineAmount;
  private java.lang.CharSequence fineDate;
  private java.lang.CharSequence ssn;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Fine() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param fineReason The new value for fineReason
   * @param fineAmount The new value for fineAmount
   * @param fineDate The new value for fineDate
   * @param ssn The new value for ssn
   */
  public Fine(java.lang.CharSequence id, java.lang.CharSequence fineReason, java.lang.CharSequence fineAmount, java.lang.CharSequence fineDate, java.lang.CharSequence ssn) {
    this.id = id;
    this.fineReason = fineReason;
    this.fineAmount = fineAmount;
    this.fineDate = fineDate;
    this.ssn = ssn;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return fineReason;
    case 2: return fineAmount;
    case 3: return fineDate;
    case 4: return ssn;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: fineReason = (java.lang.CharSequence)value$; break;
    case 2: fineAmount = (java.lang.CharSequence)value$; break;
    case 3: fineDate = (java.lang.CharSequence)value$; break;
    case 4: ssn = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'fineReason' field.
   * @return The value of the 'fineReason' field.
   */
  public java.lang.CharSequence getFineReason() {
    return fineReason;
  }


  /**
   * Sets the value of the 'fineReason' field.
   * @param value the value to set.
   */
  public void setFineReason(java.lang.CharSequence value) {
    this.fineReason = value;
  }

  /**
   * Gets the value of the 'fineAmount' field.
   * @return The value of the 'fineAmount' field.
   */
  public java.lang.CharSequence getFineAmount() {
    return fineAmount;
  }


  /**
   * Sets the value of the 'fineAmount' field.
   * @param value the value to set.
   */
  public void setFineAmount(java.lang.CharSequence value) {
    this.fineAmount = value;
  }

  /**
   * Gets the value of the 'fineDate' field.
   * @return The value of the 'fineDate' field.
   */
  public java.lang.CharSequence getFineDate() {
    return fineDate;
  }


  /**
   * Sets the value of the 'fineDate' field.
   * @param value the value to set.
   */
  public void setFineDate(java.lang.CharSequence value) {
    this.fineDate = value;
  }

  /**
   * Gets the value of the 'ssn' field.
   * @return The value of the 'ssn' field.
   */
  public java.lang.CharSequence getSsn() {
    return ssn;
  }


  /**
   * Sets the value of the 'ssn' field.
   * @param value the value to set.
   */
  public void setSsn(java.lang.CharSequence value) {
    this.ssn = value;
  }

  /**
   * Creates a new Fine RecordBuilder.
   * @return A new Fine RecordBuilder
   */
  public static avro.Fine.Builder newBuilder() {
    return new avro.Fine.Builder();
  }

  /**
   * Creates a new Fine RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Fine RecordBuilder
   */
  public static avro.Fine.Builder newBuilder(avro.Fine.Builder other) {
    if (other == null) {
      return new avro.Fine.Builder();
    } else {
      return new avro.Fine.Builder(other);
    }
  }

  /**
   * Creates a new Fine RecordBuilder by copying an existing Fine instance.
   * @param other The existing instance to copy.
   * @return A new Fine RecordBuilder
   */
  public static avro.Fine.Builder newBuilder(avro.Fine other) {
    if (other == null) {
      return new avro.Fine.Builder();
    } else {
      return new avro.Fine.Builder(other);
    }
  }

  /**
   * RecordBuilder for Fine instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Fine>
    implements org.apache.avro.data.RecordBuilder<Fine> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence fineReason;
    private java.lang.CharSequence fineAmount;
    private java.lang.CharSequence fineDate;
    private java.lang.CharSequence ssn;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.Fine.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fineReason)) {
        this.fineReason = data().deepCopy(fields()[1].schema(), other.fineReason);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.fineAmount)) {
        this.fineAmount = data().deepCopy(fields()[2].schema(), other.fineAmount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.fineDate)) {
        this.fineDate = data().deepCopy(fields()[3].schema(), other.fineDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.ssn)) {
        this.ssn = data().deepCopy(fields()[4].schema(), other.ssn);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Fine instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.Fine other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fineReason)) {
        this.fineReason = data().deepCopy(fields()[1].schema(), other.fineReason);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fineAmount)) {
        this.fineAmount = data().deepCopy(fields()[2].schema(), other.fineAmount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fineDate)) {
        this.fineDate = data().deepCopy(fields()[3].schema(), other.fineDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ssn)) {
        this.ssn = data().deepCopy(fields()[4].schema(), other.ssn);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public avro.Fine.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public avro.Fine.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fineReason' field.
      * @return The value.
      */
    public java.lang.CharSequence getFineReason() {
      return fineReason;
    }


    /**
      * Sets the value of the 'fineReason' field.
      * @param value The value of 'fineReason'.
      * @return This builder.
      */
    public avro.Fine.Builder setFineReason(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fineReason = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fineReason' field has been set.
      * @return True if the 'fineReason' field has been set, false otherwise.
      */
    public boolean hasFineReason() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fineReason' field.
      * @return This builder.
      */
    public avro.Fine.Builder clearFineReason() {
      fineReason = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fineAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getFineAmount() {
      return fineAmount;
    }


    /**
      * Sets the value of the 'fineAmount' field.
      * @param value The value of 'fineAmount'.
      * @return This builder.
      */
    public avro.Fine.Builder setFineAmount(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.fineAmount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fineAmount' field has been set.
      * @return True if the 'fineAmount' field has been set, false otherwise.
      */
    public boolean hasFineAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'fineAmount' field.
      * @return This builder.
      */
    public avro.Fine.Builder clearFineAmount() {
      fineAmount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'fineDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getFineDate() {
      return fineDate;
    }


    /**
      * Sets the value of the 'fineDate' field.
      * @param value The value of 'fineDate'.
      * @return This builder.
      */
    public avro.Fine.Builder setFineDate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.fineDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'fineDate' field has been set.
      * @return True if the 'fineDate' field has been set, false otherwise.
      */
    public boolean hasFineDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'fineDate' field.
      * @return This builder.
      */
    public avro.Fine.Builder clearFineDate() {
      fineDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssn' field.
      * @return The value.
      */
    public java.lang.CharSequence getSsn() {
      return ssn;
    }


    /**
      * Sets the value of the 'ssn' field.
      * @param value The value of 'ssn'.
      * @return This builder.
      */
    public avro.Fine.Builder setSsn(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.ssn = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'ssn' field has been set.
      * @return True if the 'ssn' field has been set, false otherwise.
      */
    public boolean hasSsn() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'ssn' field.
      * @return This builder.
      */
    public avro.Fine.Builder clearSsn() {
      ssn = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Fine build() {
      try {
        Fine record = new Fine();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.fineReason = fieldSetFlags()[1] ? this.fineReason : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.fineAmount = fieldSetFlags()[2] ? this.fineAmount : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.fineDate = fieldSetFlags()[3] ? this.fineDate : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.ssn = fieldSetFlags()[4] ? this.ssn : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Fine>
    WRITER$ = (org.apache.avro.io.DatumWriter<Fine>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Fine>
    READER$ = (org.apache.avro.io.DatumReader<Fine>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.fineReason == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.fineReason);
    }

    if (this.fineAmount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.fineAmount);
    }

    if (this.fineDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.fineDate);
    }

    if (this.ssn == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ssn);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fineReason = null;
      } else {
        this.fineReason = in.readString(this.fineReason instanceof Utf8 ? (Utf8)this.fineReason : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fineAmount = null;
      } else {
        this.fineAmount = in.readString(this.fineAmount instanceof Utf8 ? (Utf8)this.fineAmount : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fineDate = null;
      } else {
        this.fineDate = in.readString(this.fineDate instanceof Utf8 ? (Utf8)this.fineDate : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ssn = null;
      } else {
        this.ssn = in.readString(this.ssn instanceof Utf8 ? (Utf8)this.ssn : null);
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fineReason = null;
          } else {
            this.fineReason = in.readString(this.fineReason instanceof Utf8 ? (Utf8)this.fineReason : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fineAmount = null;
          } else {
            this.fineAmount = in.readString(this.fineAmount instanceof Utf8 ? (Utf8)this.fineAmount : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fineDate = null;
          } else {
            this.fineDate = in.readString(this.fineDate instanceof Utf8 ? (Utf8)this.fineDate : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ssn = null;
          } else {
            this.ssn = in.readString(this.ssn instanceof Utf8 ? (Utf8)this.ssn : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










