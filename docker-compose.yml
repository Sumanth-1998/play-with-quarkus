version: "3.8"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - stream


  kafka-1:
    image: confluentinc/cp-kafka
    container_name: kafka-1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "kafka-1:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 10
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - stream

  kafka-2:
    image: confluentinc/cp-kafka
    container_name: kafka-2
    depends_on:
      - zookeeper
      - kafka-1
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9093
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - stream

  kafka-3:
    image: confluentinc/cp-kafka
    container_name: kafka-3
    depends_on:
      - zookeeper
      - kafka-1
      - kafka-2
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9094
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - stream



  init-kafka:
    image: confluentinc/cp-kafka
    volumes:
      - ./test.sh/:/test.sh/
    depends_on:
      zookeeper:
        condition: service_started
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_started
      kafka-3:
        condition: service_started
    entrypoint: [ '/bin/sh' , "/test.sh"]
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka-1:9092", "--topic", "user-information", "--describe"]
    networks:
      - stream

  streaming-application:
    build:
      context: .
      dockerfile: src/main/docker/Dockerfile.jvm
    volumes:
      - ./src/main/java/resources/:/src/main/java/resources/
    healthcheck:
      test: "curl --silent http://localhost:8080"
    depends_on:
      zookeeper:
        condition: service_started
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_started
      kafka-3:
        condition: service_started
      init-kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - stream

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks:
      - stream
    environment:
      KAFKA_BROKERCONNECT: "kafka-1:9092"
      JVM_OPTS: "-Xms32M -Xmx128M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    ports:
      - "9000:9000"
    depends_on:
      streaming-application:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:9000/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  schemaregistry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schemaregistry
    restart: always
    depends_on:
      - zookeeper
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-1:9092
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: http://schemaregistry:8085
    ports:
      - "8085:8085"
    networks:
      - stream

networks:
  stream:
